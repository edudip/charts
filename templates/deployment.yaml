---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vaultwarden.fullname" . }}
  labels:
    {{- include "vaultwarden.labels" . | nindent 4 }}
spec:
  {{- if ne "-" .Values.externalDatabase.type }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vaultwarden.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vaultwarden.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vaultwarden.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if and .Values.persitence.enabled (eq "-" .Values.externalDatabase.type) }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.dataFolder | quote }}
          {{- end }}
          ports:
            {{- toYaml .Values.service.port | indent 12 }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "vaultwarden.fullname" . }}-env
          env:
            {{- if .Values.smtp.existingSecret.Name }}
            - name: SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.smtp.existingSecret.name | quote }}
                  key: {{ default "username" .Values.smtp.existingSecret.usernameKey | quote }}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.smtp.existingSecret.Name | quote }}
                  key: {{ default "password" .Values.smtp.existingSecret.passwordKey | quote }}
            {{- end }}
            {{- if .Values.adminTokenSecret.name }}
            - name: ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.adminTokenSecret.name | quote }}
                  key: {{ default "token" .Values.adminTokenSecret.tokenKey | quote }}
            {{- end }}
            {{- if .Values.externalDatabase.existingSecret.name }}
            - name: 
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret.name | quote }}
                  key: {{ default "uri" .Values.externalDatabase.existingSecret.uriKey | quote }}
            {{- end }}
            {{- if .Values.serviceAccount.create }}
            serviceAccountName: {{ .Values.serviceAccount.name }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.persistence.enabled (eq "-" .Values.externalDatabase.type) }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "vaultwarden.fullname" . }}-pvc
      {{- end }}